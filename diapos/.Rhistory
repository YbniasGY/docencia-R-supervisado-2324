sum(c(10, 10, 10, 10, 10, 10) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(0, 10, 5, 9, 5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 10, 10, 10) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 6, 10, 10) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 6, 4, 10) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 6, 4, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 7, 5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 8, 6, 5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 5, 6, 5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(9.5, 10, 5, 10, 8, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 8.5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 9, 8) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 9, 9) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 9.5, 9.5, 10, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 5, 9.5, 10, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 5, 10, 10, 7) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(, 10, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 10, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 0, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 3, 5, 10, 10, 6) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 3, 10, 10, 9, 9.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 5, 10, 10, 9, 9.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(7.5, 5, 10, 10, 9.5, 9.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(8, 5, 10, 10, 9.5, 9.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 8, 9.5, 9.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 8, 10, 7) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 8, 10, 7.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 8.5, 10, 7.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 8.5, 7.5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 8.5, 5) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 8.5, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 9.75, 4) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
sum(c(10, 10, 10, 10, 9.75, 9) * c(0.1, 0.1, 0.2, 0.2, 0.2, 0.2))
2.5*9*140
3150 + 25*80
0.85*(3150 + 25*80)
0.85*(3150 + 25*80) + 4500
0.85*(3150 + 25*80) + 4500 + 1000
c(1800, 1600) / 3400
(c(1800, 1600) / 3400))*800
(c(1800, 1600) / 3400)*800
(c(1850, 1600) / 3400)*800
430 / 370
c(1800, 1600) / 3400
0.85*(3150 + 25*80) + 4600 + 1000
0.85*(3150 + 25*80) + 4600 + 1100
c(1850, 1600) / 3400)*800
alquiler <- (c(1850, 1600) / 3400)*800
alquiler
salario_neto <- c(1850, 1600)
alquiler / salario_neto
gastos_comunes <- 300
(alquiler + gastos_comunes) / salario_neto
(alquiler + gastos_comunes + 13*2*4) / salario_neto
sum(c(32.19, 36.92, 32.43, 30.63, 74.04, 104.48, 34.75, 177,22, 72))
650/9
650/8
1+1+0.3
0.6*3
0.6*3
1 + 0.6+ 0. 3
1+1+0.4
1+0.7+0.4
12*6
12*7
12*8
09.5
0.95 + 0.7
0.95 + 0.5
1.4
0.7+0.5+0.4
1+0.7
0.7 + 0.5
library(tidyverse)
read_csv(file = "../entregas/CONCURSO/datos_elecciones_brutos.csv")
read_csv(file = "../entregas/CONCURSO/datos_elecciones_brutos.csv") |> View()
read_csv(file = "../entregas/CONCURSO/datos_elecciones_brutos.csv") |> select(where(is.logical))
read_csv(file = "../entregas/CONCURSO/datos_elecciones_brutos.csv") |> select(where(is.logical)) |> View()
datos_brutos <-
read_csv(file = "./datos/datos_elecciones_brutos.csv")
datos_brutos <-
read_csv(file = "../CONCURSO/datos_elecciones_brutos.csv")
datos_brutos <-
read_csv(file = "../CONCURSO/datos_elecciones_brutos.csv") |>
mutate(across(where(is.logical), as.numeric))
datos_brutos
glimpse(datos_brutos)
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),
names_to = "partido",
values_to = "votos",
values_drop_na = TRUE)
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),
names_to = "partido",
values_to = "votos",
values_drop_na = TRUE)
datos_tidy
datos_tidy |> count(tipo_eleccion)
datos_tidy |> count(vuelta)
datos_tidy <-
datos_tidy |>
select(-tipo_eleccion, -vuelta)
datos_tidy
datos_tidy <-
datos_tidy |>
mutate(fecha = lubridate::as_date(glue("{anno}-{mes}-01")),
.before = everything())
datos_tidy <-
datos_tidy |>
mutate(fecha = lubridate::as_date(glue::glue("{anno}-{mes}-01")),
.before = everything())
datos_tidy
datos_tidy <-
datos_tidy |>
mutate(fecha = lubridate::as_date(glue::glue("{anno}-{mes}-01")),
.before = everything()) |>
select(-anno, -mes)
datos_tidy
datos_tidy |> count(codigo_distrito_electoral)
datos_brutos <-
read_csv(file = "../CONCURSO/datos_elecciones_brutos.csv") |>
mutate(across(where(is.logical), as.numeric))
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),
names_to = "partido",
values_to = "votos",
values_drop_na = TRUE)
datos_tidy
datos_tidy <-
datos_tidy |>
select(-tipo_eleccion, -vuelta, -codigo_distrito_electoral)
datos_tidy
datos_tidy <-
datos_tidy |>
mutate(fecha = lubridate::as_date(glue::glue("{anno}-{mes}-01")),
.before = everything()) |>
select(-anno, -mes)
datos_tidy
datos_tidy <-
datos_tidy |>
mutate(id_mun = glue::glue("{fecha}-{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"), .before = everything()) |>
distinct(id_mun, .keep_all = TRUE)
datos_tidy
datos_tidy |> count(partido)
datos_tidy |> count(partido) |> View()
? read_csv
datos_brutos <-
read_csv(file = "../CONCURSO/datos_elecciones_brutos.csv") |>
mutate(across(where(is.logical), as.numeric))
datos_brutos |> select(`UNIDOS PODEMOS`)
datos_brutos |> select(`UNIDOS PODEMOS`) |> View()
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),
names_to = "partido",
values_to = "votos",
values_drop_na = TRUE)
datos_tidy
datos_tidy |> count(partido)
datos_tidy <-
datos_tidy |>
select(-tipo_eleccion, -vuelta, -codigo_distrito_electoral)
datos_tidy
datos_tidy |> count(partido)
datos_tidy <-
datos_tidy |>
mutate(fecha = lubridate::as_date(glue::glue("{anno}-{mes}-01")),
.before = everything()) |>
select(-anno, -mes)
datos_tidy
datos_tidy <-
datos_tidy |>
mutate(id_mun = glue::glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"), .before = everything()) |>
group_by(fecha, partido) |>
distinct(id_mun, .keep_all = TRUE) |>
ungroup()
datos_tidy
datos_tidy |> count(partido)
datos_tidy |> count(partido, sort = TRUE)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 10000)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 50000)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 15000)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 5000)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 3000)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 2300)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 1900)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 1500)
datos_tidy |> count(partido, sort = TRUE) |> filter(n < 1200)
datos_tidy |> count(partido, sort = TRUE) |> filter(partido == "VOX")
datos_tidy |> filter(censo > 50000)
datos_tidy |> filter(censo > 100000)
datos_tidy |> filter(censo > 50000) |> distinct(id_mun)
datos_tidy |> count(fecha)
8 + 6 + 7 + 8
8 + 6 + 7 + 8 + 8
8 + 6 + 7 + 8 + 8 + 12
8 + 6 + 7 + 8 + 8 + 15
8. Incopora  como nueva variable el porcentaje de votos de cada partido (en cada cita electoral, en cada municipio). El porcentaje se calcula como votos del partido entre votos válidos (votos válidos = votos a partidos + blancos)
8 + 6 + 7 + 8 + 8 + 15 + 10
8 + 6 + 7 + 8 + 8 + 14 + 9
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10 + 10
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10 + 10 + 7
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10 + 10 + 7 + 9
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10 + 10 + 7 + 9 + 6
8 + 6 + 7 + 8 + 8 + 14 + 10 + 10 + 10 + 7 + 9 + 7 + 15
messy_covid <- read_xlsx(path="../entregas/ENTREGA 2/messy_covid_data.xlsx")
library(readxl)
messy_covid <- read_xlsx(path="../entregas/ENTREGA 2/messy_covid_data.xlsx")
messy_covid |> pivot_longer(cols = c("0-9_H":"NC_NC"),
names_to = "ages",
values_to="casos")
2/7
1 - 2/7
library(gapminder)
sum(gapminder$country[gapminder$pop>40000000 & gapminder$year==2002], na.rm=TRUE)
gapminder |>
filter(year == 2002, pop > 40000000) |>
nrow()
gapminder |>
filter(year == 2002, pop > 40000000)
gapminder |>
filter(year == 2002, pop > 40000000) |> count(paises)
library(tidyverse)
datos_brutos <-
read_csv(file = "../entregas/ENTREGA 3/datos_elecciones_brutos.csv") |>
mutate(across(where(is.logical), as.numeric))
datos_brutos
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("tipo_eleccion":"votos_candidaturas"),
names_to = "partidos",
values_to = "votos",
values_drop_na = TRUE)
datos_tidy |> summarise(across(everything(), n_distinct()))
datos_tidy |> summarise(across(everything(), n_distinct)
)
datos_tidy |> summarise(across(everything(), n_distinct())) |> select(-1:2)
datos_tidy |> summarise(across(everything(), n_distinct)) |> select(-1:4)
datos_tidy |> summarise(across(everything(), n_distinct)) |> select(-(1:4))
datos_tidy |>
slice_max(fecha, n = 1) |>
distinct(id_mun, fecha)
datos_tidy <-
datos_tidy |>
mutate(fecha = ymd(glue("{anno}{mes}01")),
id_mun = glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"))
library(lubridate)
library(glue)
datos_tidy <-
datos_tidy |>
mutate(fecha = ymd(glue("{anno}{mes}01")),
id_mun = glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}"))
datos_tidy |>
slice_max(fecha, n = 1) |>
distinct(id_mun, fecha)
id_mun_filter <-
datos_tidy |>
slice_max(fecha, n = 1) |>
distinct(id_mun, fecha) |>
slice_max(censo, n = 30) |>
pull(id_mun)
id_mun_filter <-
datos_tidy |>
slice_max(fecha, n = 1) |>
distinct(id_mun, fecha, .keep_all = TRUE) |>
slice_max(censo, n = 30) |>
pull(id_mun)
id_mun_filter
cod_mun_data <- read_csv(file = "../entregas/ENTREGA 3/cod_mun.csv")
datos_tidy <-
datos_tidy |>
mutate(siglas =
case_when(str_detect(partidos, "PARTIDO SOCIALISTA OBRERO|PARTIT DELS SOCIALISTES DE CATALUNYA|PARTIDO DOS SOCIALISTAS DE GALICIA") ~ "PSOE",
str_detect(partidos, "PARTIDO POPULAR") ~ "PP",
str_detect(partidos, "CIUDADANOS|CIUTADANS") ~ "CS",
str_detect(partidos, "PODEMOS|UNIDAS PODEMOS|UNIDOS PODEMOS|EN COMÚ PODEM") ~ "UP",
str_detect(partidos, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
str_detect(partidos, "VOX") ~ "VOX",
str_detect(partidos, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
str_detect(partidos, "PARTIDO NACIONALISTA VASCO") ~ "PNV",
str_detect(partidos, "EUSKAL HERRIA BILDU") ~ "EH-BILDU",
TRUE ~ "OTROS"))
datos_tidy <-
datos_tidy |>
mutate(votos = sum(votos), .by = c(fecha, id_mun, siglas)) |>
distinct(fecha, id_mun, siglas, .keep_all = TRUE)
datos_tidy
datos_tidy |>
summarise(votos_totales = sum(votos), .by = fecha) |>
slice_max(votos_totales, n = 5)
datos_tidy |>
summarise(votos_totales = sum(votos), .by = c(fecha, partido)) |>
slice_max(votos_totales, n = 5)
datos_tidy |>
summarise(votos_totales = sum(votos), .by = c(fecha, partidos)) |>
slice_max(votos_totales, n = 5)
datos_tidy |>
summarise(votos_totales = sum(votos), .by = c(fecha, partidos)) |>
slice_max(votos_totales, n = 5, by = c(fecha, partidos))
datos_tidy |>
summarise(votos_totales = sum(votos), .by = c(fecha, partidos)) |>
slice_max(votos_totales, n = 5, by = c(fecha))
datos_tidy |>
summarise(votos_totales = sum(votos), .by = c(fecha, siglas)) |>
slice_max(votos_totales, n = 5, by = fecha)
mas_votado <- function(partidos, votos) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = 1, with_ties = FALSE) |>
pull(partidos)
return(siglas)
}
mas_votado(c(1, 2, 30, 4), c("a", "b", "c", "d"))
mas_votado <- function(partidos, votos) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = 1, votos, with_ties = FALSE) |>
pull(partidos)
return(siglas)
}
mas_votado(c(1, 2, 30, 4), c("a", "b", "c", "d"))
mas_votado <- function(partidos, votos) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = 1, votos, with_ties = FALSE) |>
pull(siglas)
return(siglas)
}
mas_votado(c(1, 2, 30, 4), c("a", "b", "c", "d"))
mas_votado <- function(partidos, votos) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = 1, votos, with_ties = FALSE) |>
pull(partidos)
return(siglas)
}
mas_votado(c(1, 2, 30, 4), c("a", "b", "c", "d"))
mas_votado(c("a", "b", "c", "d"), c(1, 2, 30, 4))
return(siglas)
n_votado <- function(partidos, votos, n = 1) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = n, votos, with_ties = FALSE) |>
slice_min(n = 1, votos, with_ties = FALSE)
pull(partidos)
return(siglas)
}
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 1)
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 2)
n_votado <- function(partidos, votos, n = 1) {
datos <- tibble(partidos, votos)
siglas <-
datos |>
slice_max(n = n, votos, with_ties = FALSE) |>
slice_min(n = 1, votos, with_ties = FALSE) |>
pull(partidos)
return(siglas)
}
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 2)
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 1)
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 2)
n_votado(c("a", "b", "c", "d"), c(10, 2, 30, 4), n = 3)
n_votado()
n_votado
datos_tidy <-
datos_tidy |>
mutate(ganador = n_votado(partidos, votos),
segundo = n_votado(partidos, votos, n = 2),
.by = c(fecha, id_mun))
datos_tidy <-
datos_tidy |>
filter(fecha == max(fecha)) |>
mutate(ganador = n_votado(partidos, votos),
segundo = n_votado(partidos, votos, n = 2),
.by = c(fecha, id_mun))
datos_tidy |>
filter(ganador == "PP") |>
count(segundo, sort = TRUE)
datos_tid
datos_tidy
datos_tidy$ganador
datos_tidy <-
datos_tidy |>
filter(fecha == max(fecha)) |>
mutate(ganador = n_votado(siglas, votos),
segundo = n_votado(siglas, votos, n = 2),
.by = c(fecha, id_mun))
datos_tidy |>
filter(ganador == "PP") |>
count(segundo, sort = TRUE)
datos_tidy |>
filter(fecha == max(fecha)) |>
summarise(votos_ccaa = sum(votos), .by = c(fecha, codigo_ccaa, siglas))
datos_tidy |>
filter(fecha == max(fecha)) |>
summarise(votos_ccaa = sum(votos), .by = c(fecha, codigo_ccaa, siglas)) |>
slice_max(n = 2, votos_ccaa, by = codigo_ccaa)
6/0
6/9
495/(4*5)
read_csv(file = "./datos_elecciones_brutos.csv")
datos_brutos <-
read_csv(file = "./datos_elecciones_brutos.csv")
#| eval: false
#| warning: false
#| message: false
datos_brutos <-
read_csv(file = "./datos_elecciones_brutos.csv") |>
mutate(across(where(is.logical), as.numeric)) |>
select(-tipo_eleccion, -vuelta, -codigo_distrito_electoral)
datos_brutos
names(datos_brutos)
names(datos_brutos)[1:20]
#| eval: false
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("anno":"votos_candidaturas"),
names_to = "partido",
values_to = "votos")
datos_tidy
#| eval: false
datos_tidy <-
datos_brutos |>
pivot_longer(cols = -("anno":"votos_candidaturas"),
names_to = "partido",
values_to = "votos",
values_drop_na = TRUE) |>
filter(votos > 0)
datos_tidy
datos_tidy |> group_by(anno, mes) |> distinct(codigo_ccaa, codigo_provincia, codigo_municipio, .keep_all = TRUE) |> count()
datos_tidy
datos_tidy |> filter(mes == "11" & anno == "2019")
datos_tidy |> filter(mes == "11" & anno == "2019") |> group_by(codigo_ccaa, codigo_provincia, codigo_municipio) |> arrange(desc(votos)) |> slice(n = 1)
datos_tidy |> filter(mes == "11" & anno == "2019") |> group_by(codigo_ccaa, codigo_provincia, codigo_municipio) |> arrange(desc(votos)) |> slice(1)
datos_tidy |> filter(mes == "11" & anno == "2019") |> group_by(codigo_ccaa, codigo_provincia, codigo_municipio) |> arrange(desc(votos)) |> slice(1) |> select(anno, mes, codigo_ccaa, codigo_provincia, codigo_municipio, partido, votos)
install.packages("nycflights13")
(4+8)/2
(4+7 + 7)/3
(4+7 + 7)/3
sum(c(4, 6, 7)*c(0.1, 0.2, 0.25))
sum(c(4, 5, 6, 7)*c(0.1, 0.2, 0.25))
sum(c(4, 5, 6, 7)*c(0.2, 0.1, 0.2, 0.25))
4.25/7.5
sum(c(4, 5.5, 6, 7)*c(0.2, 0.1, 0.2, 0.25))
4.5/7.5
sum(c(4, 5.5, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25))
sum(c(4, 6, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25))
sum(c(4, 5, 6.5, 7, 7.5)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 5, 6.5, 7, 8)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 5, 6.5, 7, 8)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 6, 6.5, 7, 8)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 6, 6.5, 7, 8.5)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 6, 6.5, 7, 7)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 6, 6.5, 7, 7.5)*c(0.2, 0.1, 0.2, 0.25, 0.25))
sum(c(4, 6, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25)) / 75
sum(c(4, 6, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25)) / 7.5
sum(c(4, 6, 6.5, 7.2)*c(0.2, 0.1, 0.2, 0.25)) / 7.5
sum(c(4, 6.2, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25)) / 7.5
sum(c(4, 5, 6.5, 7)*c(0.2, 0.1, 0.2, 0.25)) / 7.5
6*0.6 + 5*0.4
6*0.6 + 4*0.4
6.5*0.6 + 4*0.4
6.5*0.7 + 4*0.3
5*0.7 + 4*0.3
5*0.6 + 4*0.4
5*0.6 + 4.5*0.4
5*0.6 + 6*0.4
5*0.6 + 5.5*0.4
-   [**Asistencia**]{.hl-yellow}. Se [**valorará muy positivamente**]{.hl-purple} la participación en clase. Si se [**restarán puntos si eres expulsado de clase por mal comportamiento**]{.hl-purple}: -0.3 la 1ª vez, -0.6 la 2ª vez, -1.2 la 3ª a vez...
6*0.7 + 4*0.7
6*0.7 + 4*0.3
6*0.65 + 4*0.35
6*0.6 + 4*0.4
6*0.6 + 3.9*0.4
5.5*0.6 + 3.9*0.4
5.5*0.6 + 4*0.4
5.5*0.65 + 4*0.35
---
Cualitativas: representan cualidades o categorías. Ejemplos: sexo, estado civil, nivel de estudios, etc.
sum(c(0.05, 0.15, 0.2, 0.3, 0.3))
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(9.1, 7, 9.5, 9, 9.85))
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(9.1, 7, 9.5, 9, 9.85)) + 0.6
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(9.6, 9.9, 9.7, 7.5, 9.5)) + 0.6
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(7, 7.5, 8.7, 5.9, 9.2)) + 0.6
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(7, 7.5, 8.7, 5.9, 9.2))
sum(c(0.05, 0.15, 0.2, 0.3, 0.3)*c(7, 7.5, 8.7, 5.9, 9.25))
library(tidyverse)
starwars |>
drop_na(mass, height) |>
summarise(cov(mass, height))
stawars |>
select(where(is.numeric)) |>
drop_na() |> cov()
starwars |>
select(where(is.numeric)) |>
drop_na() |> cov()
starwars |>
select(where(is.numeric)) |>
drop_na() |>
cor()
